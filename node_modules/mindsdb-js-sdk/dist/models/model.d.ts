import { JsonPrimitive } from '../util/json';
import ModelsApiClient from './modelsApiClient';
import { BatchQueryOptions, QueryOptions } from './queryOptions';
import { AdjustOptions, TrainingOptions } from './trainingOptions';
/** Status of a model being up to date or not. */
type UpdateStatus = 'available' | 'updating' | 'up_to_date';
/**
 * Structure of a row returned from the MindsDB model database via the SQL query API.
 */
interface ModelRow {
    /** Name of the model. */
    name: string;
    /** Name of the project the model belongs to. */
    project: string;
    /** Target column the model predicts. */
    predict: string;
    /** Training status of the model (e.g. training, error, complete). */
    status: string;
    /** Status of the model being up to date or not.
     *  Set to 'available' when a new version of MindsDB is available that makes the model obsolete, or
     *  when new data is available in the table that was used to train the model.
     */
    update_status: UpdateStatus;
    /**
     * Model version.
     */
    version: number;
    /** Accuracy of model predictions between 0 and 1. */
    accuracy?: number;
    /** User assigned model tag. */
    tag?: string;
    /** Whether the model is active or not. */
    active: boolean;
}
interface ModelFeatureDescription {
    /**
     * Column name of the feature.
     */
    column: string;
    /**
     * Data type of the feature.
     */
    type: string;
    /**
     * Encoder type used to encode the feature.
     */
    encoder: string;
    /**
     * Role of the feature (e.g. target, feature).
     */
    role: string;
}
/**
 * Structure of a prediction obtained from a model.
 */
interface ModelPrediction {
    /**
     * Predicted value of the target column.
     */
    value: JsonPrimitive;
    /**
     * Object containing metadata (if it exists) about the prediction.
     */
    explain?: object;
    /**
     * Raw data of the prediction returned from the MindsDB database.
     */
    data: object;
}
/**
 * Represents a MindsDB model and all supported operations.
 */
declare class Model {
    /** API client to use for executing model operations. */
    modelsApiClient: ModelsApiClient;
    /** Name of the model. */
    name: string;
    /** Name of the project the model belongs to. */
    project: string;
    /** Target column the model predicts. */
    targetColumn: string;
    /** Training status of the model (e.g. training, error, complete). */
    status: string;
    /** Status of the model being up to date or not.
     *  Set to 'available' when a new version of MindsDB is available that makes the model obsolete, or
     *  when new data is available in the table that was used to train the model.
     */
    updateStatus: UpdateStatus;
    /** Model version. */
    version: number;
    /** Accuracy of model predictions between 0 and 1. */
    accuracy?: number;
    /** User assigned model tag. */
    tag?: string;
    /** Whether the model is active or not. */
    active?: boolean;
    /**
     * Constructor not to be used directly.
     *
     * @param {ModelsApiClient} modelsApiClient
     * @param {string} name - Name of the model.
     * @param {string} project - Name of the project the model belongs to.
     * @param {string} targetColumn - Target column the model predicts.
     * @param {string} status - Training status of the model.
     * @param {UpdateStatus} updateStatus - Status of the model being up to date or not.
     * @param {number} version - Model version.
     * @param {number} [accuracy] - Accuracy of model predictions between 0 and 1.
     * @param {string} [tag] - User assigned model tag.
     */
    private constructor();
    /**
     * Describes the features of this model.
     * @returns {Array<ModelFeatureDescription>} - All feature descriptions of the model.
     */
    describe(): Promise<Array<ModelFeatureDescription>>;
    /**
     * Deletes this model.
     * @throws {MindsDbError} - Something went wrong deleting this model.
     */
    delete(): Promise<void>;
    /**
     * Queries this model for a single prediction. For batch predictions, use batchQuery.
     * @param {QueryOptions} options - Options to use when querying the model.
     * @returns {Promise<ModelPrediction>} - The prediction result.
     * @throws {MindsDbError} - Something went wrong querying this model.
     */
    query(options: QueryOptions): Promise<ModelPrediction>;
    /**
     * Queries this model for a batch prediction by joining with another data source.
     * @param {BatchQueryOptions} options - Options to use when querying the model.
     * @returns {Promise<Array<ModelPrediction>>} - All prediction results from the batch query.
     * @throws {MindsDbError} - Something went wrong batch querying this model.
     */
    batchQuery(options: BatchQueryOptions): Promise<Array<ModelPrediction>>;
    /**
     * Retrains this model with the given options.
     * @param {TrainingOptions} options - Options to use when retraining the model.
     * @throws {MindsDbError} - Something went wrong retraining this model.
     */
    retrain(options?: TrainingOptions): Promise<void>;
    /**
     * Partially adjusts this model with the given options.
     * @param {string} integration - Integration name for the training data (e.g. mindsdb).
     * @param {AdjustOptions} options - Options to use when adjusting the model.
     * @throws {MindsDbError} - Something went wrong adjusting this model.
     */
    adjust(integration: string, options: AdjustOptions): Promise<void>;
    /**
     * Creates a Model instance from a row returned from the MindsDB database.
     * @param {ModelRow} obj - Data row from the MindsDB database.
     * @param {ModelsApiClient} modelsApiClient - Models API client to use for executing model operations.
     * @returns {Model} - New Model instance created from the given data.
     */
    static fromModelRow(obj: ModelRow, modelsApiClient: ModelsApiClient): Model;
}
export { Model, ModelFeatureDescription, ModelPrediction, ModelRow };
