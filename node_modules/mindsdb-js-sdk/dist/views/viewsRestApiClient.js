"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var mysql_1 = __importDefault(require("mysql"));
var errors_1 = require("../errors");
var view_1 = __importDefault(require("./view"));
var viewsApiClient_1 = __importDefault(require("./viewsApiClient"));
/** Implementation of ViewsApiClient that goes through the REST API */
var ViewsRestApiClient = /** @class */ (function (_super) {
    __extends(ViewsRestApiClient, _super);
    /**
     *
     * @param {SqlApiClient} sqlClient - SQL API client to send all SQL query requests.
     */
    function ViewsRestApiClient(sqlClient) {
        var _this = _super.call(this) || this;
        _this.sqlClient = sqlClient;
        return _this;
    }
    /**
     * Gets all views for the given project.
     * @param {string} project - Project name to get all views from.
     * @returns {Promise<Array<View>>} - All views for the given project name.
     */
    ViewsRestApiClient.prototype.getAllViews = function (project) {
        return __awaiter(this, void 0, void 0, function () {
            var showTablesQuery, sqlQueryResult, viewRows;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        showTablesQuery = "SHOW FULL TABLES FROM ".concat(mysql_1.default.escapeId(project));
                        return [4 /*yield*/, this.sqlClient.runQuery(showTablesQuery)];
                    case 1:
                        sqlQueryResult = _a.sent();
                        viewRows = sqlQueryResult.rows.filter(function (r) { return r['table_type'] === 'VIEW'; });
                        return [2 /*return*/, viewRows.map(function (v) { return new view_1.default(_this, v["tables_in_".concat(project.toLowerCase())], project); })];
                }
            });
        });
    };
    /**
     * Creates a view using the given select statement
     * @param {string} name - Name of the view to create.
     * @param {string} project - Project the view will be created in.
     * @param {string} select - SELECT statement to use for initializing the view.
     * @returns {Promise<View>} - Newly created view.
     * @throws {MindsDbError} - Something went wrong while creating the view.
     */
    ViewsRestApiClient.prototype.createView = function (name, project, select) {
        return __awaiter(this, void 0, void 0, function () {
            var createViewQuery, sqlQueryResult;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        createViewQuery = "CREATE VIEW ".concat(mysql_1.default.escapeId(project), ".").concat(mysql_1.default.escapeId(name), " AS (").concat(select, ")");
                        return [4 /*yield*/, this.sqlClient.runQuery(createViewQuery)];
                    case 1:
                        sqlQueryResult = _a.sent();
                        if (sqlQueryResult.error_message) {
                            throw new errors_1.MindsDbError(sqlQueryResult.error_message);
                        }
                        return [2 /*return*/, new view_1.default(this, name, project)];
                }
            });
        });
    };
    /**
     * Deletes a view from the project it belongs to.
     * @param {string} name - Name of the view to delete.
     * @param {string} project - Project the view belongs to.
     * @throws {MindsDbError} - Something went wrong while deleting the view.
     */
    ViewsRestApiClient.prototype.deleteView = function (name, project) {
        return __awaiter(this, void 0, void 0, function () {
            var dropModelQuery, sqlQueryResult;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dropModelQuery = "DROP MODEL ".concat(mysql_1.default.escapeId(project), ".").concat(mysql_1.default.escapeId(name));
                        return [4 /*yield*/, this.sqlClient.runQuery(dropModelQuery)];
                    case 1:
                        sqlQueryResult = _a.sent();
                        if (sqlQueryResult.error_message) {
                            throw new errors_1.MindsDbError(sqlQueryResult.error_message);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    return ViewsRestApiClient;
}(viewsApiClient_1.default));
exports.default = ViewsRestApiClient;
