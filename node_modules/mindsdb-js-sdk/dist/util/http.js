"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.retryUnauthenticatedRequest = exports.isMindsDbCloudEndpoint = exports.isLocalEndpoint = exports.getCookieValue = exports.getBaseRequestConfig = exports.createDefaultAxiosInstance = void 0;
var axios_1 = __importDefault(require("axios"));
var agentkeepalive_1 = __importStar(require("agentkeepalive"));
var constants_1 = __importDefault(require("../constants"));
/**
 * Creates the default Axios instance to use for all SDK HTTP requests.
 * @returns {Axios} - Axios instance with sensible defaults.
 */
function createDefaultAxiosInstance() {
    var keepAliveAgent = new agentkeepalive_1.default({
        maxSockets: constants_1.default.DEFAULT_MAX_SOCKETS_PER_HOST,
        maxFreeSockets: constants_1.default.DEFAULT_MAX_FREE_SOCKETS,
        timeout: constants_1.default.DEFAULT_ACTIVE_SOCKET_TIMEOUT_MS,
        freeSocketTimeout: constants_1.default.DEFAULT_FREE_SOCKET_TIMEOUT_MS,
    });
    var httpsKeepAliveAgent = new agentkeepalive_1.HttpsAgent({
        maxSockets: constants_1.default.DEFAULT_MAX_SOCKETS_PER_HOST,
        maxFreeSockets: constants_1.default.DEFAULT_MAX_FREE_SOCKETS,
        timeout: constants_1.default.DEFAULT_ACTIVE_SOCKET_TIMEOUT_MS,
        freeSocketTimeout: constants_1.default.DEFAULT_FREE_SOCKET_TIMEOUT_MS,
    });
    return axios_1.default.create({
        baseURL: constants_1.default.BASE_CLOUD_API_ENDPOINT,
        timeout: constants_1.default.DEFAULT_HTTP_TIMEOUT_MS,
        httpAgent: keepAliveAgent,
        httpsAgent: httpsKeepAliveAgent,
    });
}
exports.createDefaultAxiosInstance = createDefaultAxiosInstance;
/**
 * Gets the base HTTP request config to use for all REST API requests.
 * @param {HttpAuthenticator} authenticator - HTTP authenticator used for authentication. Only used for Cloud endpoints.
 * @returns {AxiosRequestConfig} - Request configuration compatible with Axios.
 */
function getBaseRequestConfig(authenticator) {
    var requestConfig = {};
    if (authenticator.session) {
        requestConfig['headers'] = {
            Cookie: "session=".concat(authenticator.session),
        };
    }
    return requestConfig;
}
exports.getBaseRequestConfig = getBaseRequestConfig;
/**
 * Gets the value of the given cookie key from all response cookies.
 * @see {@link https://datatracker.ietf.org/doc/html/rfc6265#section-3.1|Cookies RFC} for example of cookie syntax.
 * @param {Array<string>} allCookies - All response cookies.
 * @param {string} cookieKey - Name of cookie to retrieve.
 * @returns {string | undefined} - Value of given cookie, or undefined if not present.
 */
function getCookieValue(allCookies, cookieKey) {
    var allCookieComponents = allCookies.map(function (c) { return c.split(';'); });
    for (var i = 0; i < allCookieComponents.length; i++) {
        var keysAndValues = allCookieComponents[i].map(function (comp) {
            return comp.trim().split('=');
        });
        // First key-value pair is the cookie value. Rest are keys like Domain, Path, etc.
        if (keysAndValues[0][0] === cookieKey) {
            return keysAndValues[0][1];
        }
    }
    return undefined;
}
exports.getCookieValue = getCookieValue;
/**
 * Determines whether or not the given URL is for MindsDB Cloud or not.
 * @param {string} - URL to test.
 * @returns {boolean} - Whether or not the URL is a Cloud endpoint.
 */
function isMindsDbCloudEndpoint(url) {
    // Cloud endpoints:
    // - https://cloud.mindsdb.com
    // - https://alpha.mindsdb.com
    // - https://beta.mindsdb.com
    return url.includes('mindsdb.com');
}
exports.isMindsDbCloudEndpoint = isMindsDbCloudEndpoint;
/**
 * Determines whether or not the given URL is a local URL.
 * @param {string} - URL to test.
 * @returns {boolean} - Whether or not the URL is a local endpoint.
 */
function isLocalEndpoint(url) {
    return url.includes('localhost') || url.includes('127.0.0.1');
}
exports.isLocalEndpoint = isLocalEndpoint;
/**
 * Retries requests once that failed for authentication reasons (unauthorized/forbidden).
 * @param {AxiosError} error - Error returned from HTTP request.
 * @param {Axios} client - Axios client to handle reauthentication requests.
 * @param {HttpAuthenticator} authenticator - Authenticator to use for reauthenticating.
 * @returns {AxiosResponse} - Response for retrying original request that failed.
 */
function retryUnauthenticatedRequest(error, client, authenticator) {
    return __awaiter(this, void 0, void 0, function () {
        var originalRequestConfig, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!error.config) {
                        throw error;
                    }
                    originalRequestConfig = error.config;
                    _a = !originalRequestConfig._retried;
                    if (!_a) return [3 /*break*/, 2];
                    return [4 /*yield*/, authenticator.handleReauthentication(client, error)];
                case 1:
                    _a = (_b.sent());
                    _b.label = 2;
                case 2:
                    if (_a) {
                        originalRequestConfig.headers['Cookie'] = "session=".concat(authenticator.session);
                        originalRequestConfig._retried = true;
                        return [2 /*return*/, client.request(originalRequestConfig)];
                    }
                    throw error;
            }
        });
    });
}
exports.retryUnauthenticatedRequest = retryUnauthenticatedRequest;
