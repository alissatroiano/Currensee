import { Axios, AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import HttpAuthenticator from '../httpAuthenticator';
/**
 * Creates the default Axios instance to use for all SDK HTTP requests.
 * @returns {Axios} - Axios instance with sensible defaults.
 */
declare function createDefaultAxiosInstance(): Axios;
/**
 * Gets the base HTTP request config to use for all REST API requests.
 * @param {HttpAuthenticator} authenticator - HTTP authenticator used for authentication. Only used for Cloud endpoints.
 * @returns {AxiosRequestConfig} - Request configuration compatible with Axios.
 */
declare function getBaseRequestConfig(authenticator: HttpAuthenticator): AxiosRequestConfig;
/**
 * Gets the value of the given cookie key from all response cookies.
 * @see {@link https://datatracker.ietf.org/doc/html/rfc6265#section-3.1|Cookies RFC} for example of cookie syntax.
 * @param {Array<string>} allCookies - All response cookies.
 * @param {string} cookieKey - Name of cookie to retrieve.
 * @returns {string | undefined} - Value of given cookie, or undefined if not present.
 */
declare function getCookieValue(allCookies: Array<string>, cookieKey: string): string | undefined;
/**
 * Determines whether or not the given URL is for MindsDB Cloud or not.
 * @param {string} - URL to test.
 * @returns {boolean} - Whether or not the URL is a Cloud endpoint.
 */
declare function isMindsDbCloudEndpoint(url: string): boolean;
/**
 * Determines whether or not the given URL is a local URL.
 * @param {string} - URL to test.
 * @returns {boolean} - Whether or not the URL is a local endpoint.
 */
declare function isLocalEndpoint(url: string): boolean;
/**
 * Retries requests once that failed for authentication reasons (unauthorized/forbidden).
 * @param {AxiosError} error - Error returned from HTTP request.
 * @param {Axios} client - Axios client to handle reauthentication requests.
 * @param {HttpAuthenticator} authenticator - Authenticator to use for reauthenticating.
 * @returns {AxiosResponse} - Response for retrying original request that failed.
 */
declare function retryUnauthenticatedRequest(error: AxiosError, client: Axios, authenticator: HttpAuthenticator): Promise<AxiosResponse>;
export { createDefaultAxiosInstance, getBaseRequestConfig, getCookieValue, isLocalEndpoint, isMindsDbCloudEndpoint, retryUnauthenticatedRequest, };
