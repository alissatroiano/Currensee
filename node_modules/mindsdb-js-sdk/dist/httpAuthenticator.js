"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = require("axios");
var constants_1 = __importDefault(require("./constants"));
var http_1 = require("./util/http");
/** Handles HTTP authentication and reauthentication for MindsDB Cloud. */
var HttpAuthenticator = /** @class */ (function () {
    function HttpAuthenticator() {
        /** MindsDB email used for authentication. */
        this.user = '';
        /** MindsDB password used for authentication. */
        this.password = '';
        /** MindsDb managed instance */
        this.managed = false;
    }
    /**
     * Logs into MindsDB Cloud and stores the returned session.
     * @param {Axios} axiosClient - Axios instance to use when sending login request.
     * @param {string} user - MindsDB email to use for logging in.
     * @param {string} password - MindsDB password to use for logging in.
     */
    HttpAuthenticator.prototype.authenticate = function (axiosClient, user, password, managed) {
        return __awaiter(this, void 0, void 0, function () {
            var baseURL, loginURL, loginResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.user = user;
                        this.password = password;
                        this.managed = managed || false;
                        baseURL = axiosClient.defaults.baseURL || constants_1.default.BASE_CLOUD_API_ENDPOINT;
                        loginURL = new URL(managed ? constants_1.default.BASE_MANAGED_LOGIN_URI : constants_1.default.BASE_LOGIN_URI, baseURL);
                        return [4 /*yield*/, axiosClient.post(loginURL.href, {
                                email: this.user,
                                username: this.user,
                                password: this.password,
                            })];
                    case 1:
                        loginResponse = _a.sent();
                        this.session = (0, http_1.getCookieValue)(loginResponse.headers['set-cookie'] || [], 'session');
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     *
     * @param {Axios} axiosClient - Axios instance to use when sending login request.
     * @param {any} error - Original error to inspect for determining if we need to reauthenticate.
     * @returns - True if we successfully reauthenticated, false if not needed.
     */
    HttpAuthenticator.prototype.handleReauthentication = function (axiosClient, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    error) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.session || !error) {
                            // We never needed to authenticate to begin with.
                            return [2 /*return*/, false];
                        }
                        if (!error.response ||
                            (error.response.status != axios_1.HttpStatusCode.Unauthorized &&
                                error.response.status != axios_1.HttpStatusCode.Forbidden)) {
                            // Only reauthenticate for 401/403 responses.
                            return [2 /*return*/, false];
                        }
                        console.info('MindsDB HTTP session expired. Reauthenticating...');
                        return [4 /*yield*/, this.authenticate(axiosClient, this.user, this.password, this.managed)];
                    case 1:
                        _a.sent();
                        console.info('Successfully reauthenticated.');
                        return [2 /*return*/, true];
                }
            });
        });
    };
    return HttpAuthenticator;
}());
exports.default = HttpAuthenticator;
