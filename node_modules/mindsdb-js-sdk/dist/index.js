"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.View = exports.Table = exports.MindsDbError = exports.Model = exports.Database = void 0;
var modelsModule_1 = __importDefault(require("./models/modelsModule"));
var databasesModule_1 = __importDefault(require("./databases/databasesModule"));
var projectsModule_1 = __importDefault(require("./projects/projectsModule"));
var sqlModule_1 = __importDefault(require("./sql/sqlModule"));
var viewsModule_1 = __importDefault(require("./views/viewsModule"));
var constants_1 = __importDefault(require("./constants"));
var http_1 = require("./util/http");
var tablesModule_1 = __importDefault(require("./tables/tablesModule"));
var httpAuthenticator_1 = __importDefault(require("./httpAuthenticator"));
var database_1 = __importDefault(require("./databases/database"));
exports.Database = database_1.default;
var model_1 = require("./models/model");
Object.defineProperty(exports, "Model", { enumerable: true, get: function () { return model_1.Model; } });
var errors_1 = require("./errors");
Object.defineProperty(exports, "MindsDbError", { enumerable: true, get: function () { return errors_1.MindsDbError; } });
var table_1 = __importDefault(require("./tables/table"));
exports.Table = table_1.default;
var view_1 = __importDefault(require("./views/view"));
exports.View = view_1.default;
var defaultAxiosInstance = (0, http_1.createDefaultAxiosInstance)();
var httpAuthenticator = new httpAuthenticator_1.default();
var SQL = new sqlModule_1.default.SqlRestApiClient(defaultAxiosInstance, httpAuthenticator);
var Databases = new databasesModule_1.default.DatabasesRestApiClient(SQL);
var Models = new modelsModule_1.default.ModelsRestApiClient(SQL);
var Projects = new projectsModule_1.default.ProjectsRestApiClient(defaultAxiosInstance, httpAuthenticator);
var Tables = new tablesModule_1.default.TablesRestApiClient(SQL);
var Views = new viewsModule_1.default.ViewsRestApiClient(SQL);
var getAxiosInstance = function (options) {
    var _this = this;
    var httpClient = options.httpClient || defaultAxiosInstance;
    httpClient.defaults.baseURL =
        options.host || constants_1.default.BASE_CLOUD_API_ENDPOINT;
    // Retry failed requests with 401/403 status code once.
    httpClient.interceptors.response.use(function (resp) { return resp; }, function (error) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
        return [2 /*return*/, (0, http_1.retryUnauthenticatedRequest)(error, httpClient, httpAuthenticator)];
    }); }); });
    return httpClient;
};
/**
 * Initializes the MindsDB SDK and authenticates the user if needed.
 * @param {ConnectionOptions} options - Options to use for initialization.
 * @throws {MindsDbError} - MindsDB authentication request failed.
 */
var connect = function (options) {
    return __awaiter(this, void 0, void 0, function () {
        var httpClient, baseURL, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    httpClient = getAxiosInstance(options);
                    SQL.client = httpClient;
                    Projects.client = httpClient;
                    baseURL = httpClient.defaults.baseURL || constants_1.default.BASE_CLOUD_API_ENDPOINT;
                    if (!((0, http_1.isMindsDbCloudEndpoint)(baseURL) || !(0, http_1.isLocalEndpoint)(baseURL))) return [3 /*break*/, 4];
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, httpAuthenticator.authenticate(httpClient, options.user, options.password, options.managed)];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    error_1 = _a.sent();
                    throw errors_1.MindsDbError.fromHttpError(error_1, baseURL);
                case 4: return [2 /*return*/];
            }
        });
    });
};
exports.default = { connect: connect, SQL: SQL, Databases: Databases, Models: Models, Projects: Projects, Tables: Tables, Views: Views };
