"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var sqlApiClient_1 = __importDefault(require("./sqlApiClient"));
var constants_1 = __importDefault(require("../constants"));
var http_1 = require("../util/http");
var errors_1 = require("../errors");
/**
 * Class to perform SQL operations through the REST API.
 * @see {@link https://docs.mindsdb.com/rest/sql|query API docs}
 */
var SqlRestApiClient = /** @class */ (function (_super) {
    __extends(SqlRestApiClient, _super);
    /**
     *
     * @param {Axios} client - Axios instance used for all requests.
     */
    function SqlRestApiClient(client, authenticator) {
        var _this = _super.call(this) || this;
        _this.client = client;
        _this.authenticator = authenticator;
        return _this;
    }
    /**
     * @returns {string} SQL query endpoint to send API requests to.
     */
    SqlRestApiClient.prototype.getQueryUrl = function () {
        var baseUrl = this.client.defaults.baseURL || constants_1.default.BASE_CLOUD_API_ENDPOINT;
        var queryUrl = new URL(constants_1.default.BASE_SQL_URI, baseUrl);
        return queryUrl.toString();
    };
    /**
     * Returns a structured query result from the raw SQL query API response.
     * @param {SqlApiResponse} response - The raw API response data from the /api/sql/query endpoint.
     * @returns {SqlQueryResult} - A structured query result in an easier to use format.
     */
    SqlRestApiClient.prototype.makeQueryResult = function (response) {
        var respColumnNames = response['column_names'] || [];
        respColumnNames = respColumnNames.map(function (name) { return name.toLowerCase(); });
        var queryResult = {
            columnNames: respColumnNames,
            context: response['context'],
            type: response['type'],
            rows: [],
            error_message: response['error_message'],
        };
        var resultRows = [];
        var respData = response['data'] || [];
        for (var i = 0; i < respData.length; i++) {
            var rawRow = respData[i];
            // A row is a dictionary of column name to the corresponding value.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            var row = {};
            for (var j = 0; j < rawRow.length; j++) {
                var colName = respColumnNames[j];
                var rowVal = rawRow[j];
                row[colName] = rowVal;
            }
            resultRows.push(row);
        }
        queryResult['rows'] = resultRows;
        return queryResult;
    };
    /**
     * Runs the given SQL query on the backend.
     * @param {string} query - The raw SQL query to run.
     * @returns {Promise<SqlQueryResult>} - A structured query result from running the raw SQL query.
     * @throws {MindsDbError} - Something went wrong sending the API request.
     */
    SqlRestApiClient.prototype.runQuery = function (query) {
        return __awaiter(this, void 0, void 0, function () {
            var queryRequest, _a, authenticator, client, queryUrl, queryResponse, responseData, error_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        queryRequest = {
                            query: query,
                        };
                        _a = this, authenticator = _a.authenticator, client = _a.client;
                        queryUrl = this.getQueryUrl();
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, client.post(queryUrl, queryRequest, (0, http_1.getBaseRequestConfig)(authenticator))];
                    case 2:
                        queryResponse = _b.sent();
                        responseData = queryResponse.data;
                        return [2 /*return*/, this.makeQueryResult(responseData)];
                    case 3:
                        error_1 = _b.sent();
                        throw errors_1.MindsDbError.fromHttpError(error_1, queryUrl);
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return SqlRestApiClient;
}(sqlApiClient_1.default));
exports.default = SqlRestApiClient;
